#!/usr/bin/env python

e=5
n1=27704869302997392661657220866050898311244838064441841646219678939774022015189626988458013202055324121575178127785443104668568510154290862546385050192223834526533281019024832529003150889500239003997193433681439748742863667885884600761042973805747444151235119630692023497480373605174402083098784774260598500704204830838640452269557422523956579822333927103206032036790181056467053386587027251158732706542157785630247314811143864496648816832586752499970199993966197104172410676580459219755530100423097826697748734779914994258710204732420553267648117419471192908008756826863301494775515247397371101890288434484387008318743
n2=18651004307844646259253649467383147390293431742886493780526133996712908761810086744997747335569632407437212644550340369838116874964948323587041960345450410142633430356737029425417459254783461252914597639579112148306592186296779131520793551620503311489667794362306293712052220490468117264617739925695016019122544994872879068818245522425978717883220690213600472538101921977584498265882956199956703716669750769096341354262168846550907912170702820015467641766873279564440334244408410435872220572814875437403601211737596168757767933294833149221910290585495435854967743523179774814425140387974268925157907543717319979278719
c1=9100754579960236848352128054287238406518105657996793847042595697144965162971810789023005958434542782139419200292385624128793400495984695042499402140947720400926053734800588304911042534572527671927071425093365485018366946711031154870070910307305216329688646538898982338573743976640389466085990407358585972809298867044207357016401794771653257186034143856968654099977421129985001327799621373780729741636442969340198189167590231239916057678062125002109009684515243374228969939198046099672731859350935900149976041036908956553725645311248475574088657714812531717222416775378628522540222133026658696543077525635017217392437
c2=8555874836128783569299328316905700097820370889862249687656401811689201969340059759470306042227615208047888480821124458105773907135957621062084923052879044448611667515545398399275426849365230162497252176546573170412394779154272570009465577753368676976444556464526347202426210827020169367425914920532557858421994076126134646682090645762285020165611566574053289404927971530887948649542023169562267822838992653800337218584043277983382558007372625052640015477788727480702287209233827462447710490790251829178713360054812714500326233489354846466758573241051407301439246706145740372860402726735258439589880979136520944468902
n3=24702421814821836551903876433224441074579464425274807301602422274038708759438641872510368628132499229979420916628282582157722658313352029926755909471442340622129752553326773066140378441868139065306731608777607548722369268018333206018289506152997253107921044917595876863895452191596124467001954775620593105294774773413640377751738878199324453201585436924334771374746229187904644477429071165417097190503460272061672679762454409236497175611985788128943271731991541469650278221026831372562966311745260077989632782363997836745406747629278499078048217779690323347804954969904590610003564200456442837270462227214001173767183
c3=14315319233498245395263674164225062334251637910061051753261197026580757254328378604568391817771590784038617756390924363034204721850704290348612525361015565151612620198104497750731816309767627241720990644792916310043483320833997430907553486758349900800169718013446807990051723530757102168568646751631028050067866589759221747909879360869020857004479093786528980984079345312959763130972539963129766332719433415696702425763993856436414674893439295873955963308841672466031098222169231888069993944570845428573287212985131141653651256569910823943851705442710743871882079432157775730854186954499281759332791012461346368657277


def chinese_remainder(n, a):
    sum = 0
    prod = reduce(lambda a, b: a*b, n)
    for n_i, a_i in zip(n, a):
        p = prod / n_i
        sum += a_i * mul_inv(p, n_i) * p
    return sum % prod

def mul_inv(a, b):
    b0 = b
    x0, x1 = 0, 1
    if b == 1: return 1
    while a > 1:
        q = a / b
        a, b = b, a%b
        x0, x1 = x1 - q * x0, x0
    if x1 < 0: x1 += b0
    return x1

def find_invpow(x,n):
    """Finds the integer component of the n'th root of x,
    an integer such that y ** n <= x < (y + 1) ** n.
    """
    high = 1
    while high ** n < x:
        high *= 2
    low = high/2
    while low < high:
        mid = (low + high) // 2
        if low < mid and mid**n < x:
            low = mid
        elif high > mid and mid**n > x:
            high = mid
        else:
            return mid
    return mid + 1

flag_cubed=chinese_remainder([n1,n2,n3],[c1,c2,c3])
flag=find_invpow(flag_cubed,5)

print "flag: ",hex(flag)[2:-1].decode("hex")

